{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OAEE,aADA,CACA,QAAMC,SAba,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAQhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAtBoB,SAACP,GAEzBF,EAAcE,EAAEQ,OAAOF,QAqBnBG,YAAY,iB,+BC7BPC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,gEAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXjB,kBAedM,GAfc,4CAAH,sDCcPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGvC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,uBACA,4BAAIA,IACJ,2BChBOO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAYxB,ECf0B,SAACA,GAC3B,MAA0Bf,mBAAS,CACjCsB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAsBA,OAjBAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GAEtBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGZ,CAACpB,IASGqB,EDR2BK,CAAa1B,GAAjCa,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAGtB,OACE,qCACE,6BAAKpB,IAEJoB,GAAW,4CAEZ,qBAAKJ,UAAU,YAAf,SASGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAGMA,GAFCA,EAAIC,aElCN,SAASgB,IAEtB,MAAoC1C,mBAAS,CAAC,eAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAUA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BACG4C,EAAWnB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,W,MCrBxB6B,IAASC,OAAO,cAACH,EAAD,IAAkBI,SAASC,eAAe,W","file":"static/js/main.44b465fb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  // llama al \"e\" de evento\r\n  const handleInputChange = (e) => {\r\n    // console.log(e.target.value);\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cats) => [inputValue, ...cats]);\r\n      setInputValue(\"\");\r\n    }\r\n\r\n    // console.log(\"Submit realizado\");\r\n  };\r\n\r\n  return (\r\n    //solo si se agrupa todo en un tag\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n        placeholder=\"Categoria\"\r\n      />\r\n      {/* <h5>{inputValue}</h5> */}\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=100&api_key=FXaSMoeu3zBGBQQ4satMCO5UWDsBumYS`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n  // console.log(gifs);\r\n  // setImages(gifs);\r\n};\r\n","import React from \"react\";\r\n\r\n// export const GifGridItem = ({ img }) => {\r\n//   console.log(img);\r\n\r\n//   return <div>{img.title}</div>;\r\n// };\r\n//ver de manera diferente las propiedades\r\n// export const GifGridItem = (props) => {\r\n//   console.log(props);\r\n\r\n//   return <div></div>;\r\n// };\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  // console.log({ id, title, url });\r\n\r\n  return (\r\n    <div className=\"card animate__animated animate__bounce\">\r\n      <img src={url} alt={title} />\r\n      <hr />\r\n      <p>{title}</p>\r\n      <br />\r\n    </div>\r\n  );\r\n};\r\n","// import React, { useState, useEffect } from \"react\";\r\nimport React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n// import { getGifs } from \"../helpers/getGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  // Start otra manera\r\n  // const [count, setCount] = useState(0);\r\n\r\n  // const [images, setImages] = useState([]);\r\n\r\n  // useEffect(() => {\r\n  //   getGifs(category).then(setImages);\r\n  // }, [category]);\r\n  // End otra manera de ver\r\n  // getGifs(); // una manera repetitiva\r\n\r\n  const { data: images, loading } = useFetchGifs(category);\r\n  // console.log(loading);\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      {/* {loading ? \"Cargando...\" : \"Data cargada!\"} */}\r\n      {loading && <p>Cargando...</p>}\r\n\r\n      <div className=\"card-grid\">\r\n        {/* <h3>{count}</h3>\r\n      <button onClick={() => setCount(count + 1)}>{category}</button> */}\r\n        {/* <ol>\r\n        {images.map(({ id, title }) => (\r\n          <li key={id}>{title}</li>\r\n          ))}\r\n        </ol> */}\r\n\r\n        {images.map((img) => (\r\n          <GifGridItem\r\n            key={img.id}\r\n            //  img={img}\r\n            {...img} //otra forma de mostrar\r\n          />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      // console.log(imgs);\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  // setTimeout(() => {\r\n  //   setState({\r\n  //     data: [1, 2, 3, 4, 5],\r\n  //     loading: false,\r\n  //   });\r\n  // }, 2000);\r\n\r\n  return state; //{data:[], loading: true}\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport default function GifExpertApp() {\r\n  // const categories = [\"One Punch\", \"Kimetsu no Yaiba\", \"Valkirie\"];\r\n  const [categories, setCategories] = useState([\"Rick Morty\"]);\r\n\r\n  // const handleAdd = () => {\r\n  //   // setCategories([...categories, \"Assasin\"]); //Agrega al final\r\n  //   // setCategories([\"Assasin\", ...categories]);//Agrega al inicio\r\n  //   setCategories((cats) => [...cats, \"SAO\"]);\r\n\r\n  //   console.log(setCategories);\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      {/* <button onClick={handleAdd}>Agregar</button> */}\r\n\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n          // return <li key={category}>{category}</li>;\r\n          // los keys vienen de las base de datos, no debe ser el indice y debe ser unico\r\n          // se pone un parentesis para dar a entender que regresa una lista\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}